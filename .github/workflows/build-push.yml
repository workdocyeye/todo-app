name: Build and Push Docker Images # 工作流程的名称

on:
  push:
    branches: [ "master", "main" ] # 当代码推送到 master 或 main 分支时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner 来执行任务
    permissions:
      contents: read # 需要读取仓库内容的权限

    steps:
      - name: Checkout repository # 步骤1：检出代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: Set up QEMU # 步骤2：设置 QEMU (用于构建多平台镜像，可选但推荐)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx # 步骤3：设置 Docker Buildx (更快的构建器)
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub # 步骤4：登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # 使用 GitHub Secrets 中的用户名
          password: ${{ secrets.DOCKERHUB_TOKEN }} # 使用 GitHub Secrets 中的访问令牌

      - name: Build and push Backend image # 步骤5：构建并推送后端镜像
        uses: docker/build-push-action@v6
        with:
          context: ./backend # Dockerfile 所在的上下文路径
          file: ./backend/Dockerfile # <--- CHANGE BACK: Path relative to root
          push: true # 推送到仓库
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:latest # 镜像标签，使用用户名和 'latest'

      - name: Build and push Frontend image # 步骤6：构建并推送前端镜像
        uses: docker/build-push-action@v6
        with:
          context: ./frontend # Dockerfile 所在的上下文路径
          file: ./frontend/Dockerfile # <--- CHANGE BACK: Path relative to root
          push: true # 推送到仓库
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:latest # 镜像标签 